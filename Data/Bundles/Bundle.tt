<#@ template language="C#" #>
<#@ output extension=".cs" #>


<#
    string[] types =
    {
        "short", "int", "long",
        "ushort", "uint", "ulong",
        "float", "double", "decimal",
        "string", "bool", "byte",
        "sbyte", "DateTime", "Bundle"
    };

    static string Capitalise(string str)
    {
        return char.ToUpper(str[0]) + str.Substring(1);
    }
#>
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
namespace Data.Bundles {
    public abstract class Bundle {
        protected const string TypeName = "__typeName";

        <#
    foreach (var type in types)
    {
#>public virtual <#= type #> Get<#= Capitalise(type) #> ( string key )=>GetInternal<<#= type #>>( key );
        public virtual List<<#= type #>> Get<#= Capitalise(type) #>List ( string key )=>GetListInternal<<#= type #>>( key );
        public virtual void Put ( string key, <#= type #> value )=>PutInternal( key, value );
        public virtual void Put ( string key, IEnumerable<<#= type #>> enumerable )=>PutInternal( key, enumerable );
        <#
    }
#>
        
        protected abstract T GetInternal<T>(string key);
        protected abstract List<T> GetListInternal<T>(string key);
        protected abstract void PutInternal<T>(string key, T value);
        public abstract bool Contains(string key);

        protected abstract Bundle BundleFromBundlable(IBundlable bundlable);
        public virtual T Get<T>() where T : IBundlable
        {
            var className = GetString(TypeName);
            if (string.IsNullOrEmpty(className)) return default;

            var type = Type.GetType(className);

            if (type == null) return default;
            T obj;
            try
            {
                obj = (T)Activator.CreateInstance(type);
            }
            catch (MissingMethodException)
            {
                obj = (T) FormatterServices.GetUninitializedObject(type);
            }
            obj?.RestoreFromBundle(this);
            return  obj;
        }

        public virtual void Put(IBundlable value)
        {
            value.StoreInBundle(this);
            Put(TypeName, value.GetType().AssemblyQualifiedName);
        }

        public virtual T GetBundlable<T>(string key) where T : IBundlable
        {
            return GetBundle(key).Get<T>();
        }

        public virtual List<T> GetBundlableList<T>(string key)  where T : IBundlable
        {
            var bundles = GetBundleList(key);
            if (bundles == null) return null;
            var list = new List<T>();
            foreach (var t in bundles) list.Add(t.Get<T>());
            return list;
        }

        public virtual void Put(string key, IBundlable value)
        {
            Put(key,BundleFromBundlable(value));
        }

        public virtual void Put(string key, IEnumerable<IBundlable> enumerable)
        {
            var list = new List<Bundle>();
            foreach (var bundlable in enumerable)
            {
                list.Add(BundleFromBundlable(bundlable));
            }
            Put(key,list);
        }

        public virtual Type GetType(string key)
        {
            return Type.GetType(GetString(key));
        }

        public virtual List<Type> GetTypeList(string key)
        {
            var strings = GetStringList(key);
            if (strings == null) return null;
            var list = new List<Type>();
            foreach (var t in strings) list.Add(Type.GetType(key));
            return list;
        }

        public virtual void Put(string key, Type value)
        {
            Put(key, value.AssemblyQualifiedName);
        }

        public virtual void Put(string key, IEnumerable<Type> enumerable)
        {
            var list = new List<string>();
            foreach (var type in enumerable) list.Add(type.AssemblyQualifiedName);

            Put(key, list);
        }

        public abstract byte[] Serialize();
        public abstract void Deserialize(byte[] data);

        public abstract BundleFactory Factory();
    }

    public abstract class BundleFactory
    {
        public abstract Bundle CreateBundle();
    }
}